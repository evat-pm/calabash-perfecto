#!/usr/bin/env ruby

# Modified by Perfecto Mobile Ltd.

require 'fileutils'
require 'rbconfig'
require 'calabash-perfectomobile/version'

require 'optparse'

options = {}
optparse = OptionParser.new do|opts|   
	opts.banner = "Usage: calabash-perfectomobile [options] apk-file/ipa-file "  
	opts.separator ""
	
	# Define the options, and what they do   

	options[:version] = false   
	opts.on( '-v', '--version', 'Get calabash-perfectomobile version' ) do     
		options[:version] = true   
	end    

	options[:install] = false   
	opts.on( '-i', '--install', 'Optional - Install app before the first test scenario' ) do     
		options[:install] = true   
	end    

  	options[:location] = nil   
	opts.on( '-l LOCATION', '--location LOCATION', 'Optional - Location in repository for uploading apk/ipa file' ) do|location|     
		options[:location] = location   
	end    

  	options[:appName] = nil   
	opts.on( '-a APPNAME', '--app APPNAME', 'Application name is APPNAME' ) do|appName|     
		options[:appName] = appName   
	end    

	options[:cloud] = nil   
	opts.on( '-c CLOUD', '--cloud CLOUD', 'Connect to MobileCloud CLOUD' ) do|cloud|     
		options[:cloud] = cloud   
	end    

  options[:user] = nil   
	opts.on( '-u USER', '--user USER', 'Connect with username USER' ) do|user|     
		options[:user] = user   
	end    

  options[:password] = nil   
	opts.on( '-p PASSWORD', '--password PASSWORD', 'Connect with password PASSWORD' ) do|password|     
		options[:password] = password   
	end    

  options[:device] = nil   
	opts.on( '-d DEVICE_ID', '--device DEVICE_ID', 'Connect to device with id DEVICE_ID' ) do|device|     
		options[:device] = device   
	end    

  options[:device] = nil   
	opts.on( '-r REPORT_DIR', '--report REPORT_DIR', 'Download reports to directory REPORT_DIR' ) do|report|     
		options[:report] = report   
	end    

	# This displays the help screen, all programs are   
	# assumed to have this option.   
	opts.on( '-h', '--help', 'You\'re looking at it' ) do     
		puts opts     
		exit   
	end

	opts.separator ""
    opts.separator "Additional ways to configure the calabash-perfectomobile parameters:"
	opts.separator "- Update the env.rb file located in features\\support"
	opts.separator "- Add to your environment variables see README file, https://github.com/calabash/calabash-perfectomobile"
end 
optparse.parse!  
if options[:version]
  puts "calabash-perfectomobile #{Calabash::PerfectoMobile::VERSION}"
  exit
end 
if options[:install]
  ENV["CALABASH_PERFECTO_MOBILE_INSTALL"] = 'true'
end 
if options[:location]
  ENV["CALABASH_PERFECTO_MOBILE_UPLOAD_LOCATION"] = options[:location]
end 
if options[:appName]
  ENV["CALABASH_PERFECTO_MOBILE_APP_NAME"] = options[:appName]
end 
if options[:cloud]
  ENV["CALABASH_PERFECTO_MOBILE_MOBILECLOUD"] = options[:cloud]
end 
if options[:user]
  ENV["CALABASH_PERFECTO_MOBILE_USER"] = options[:user]
end 
if options[:password]
  ENV["CALABASH_PERFECTO_MOBILE_PASSWORD"] = options[:password]
end 
if options[:device]
  ENV["CALABASH_PERFECTO_MOBILE_DEVICE"] = options[:device]
end
if options[:report]
  ENV["CALABASH_PERFECTO_MOBILE_REPORT_DIR"] = options[:report]
end

ENV["CALABASH_PERFECTO_MOBILE_APP_FILE"] =  ARGV.shift  

# for ruby 1.9.1 and earlier
unless defined? RbConfig.ruby
  def RbConfig.ruby
    File.join(RbConfig::CONFIG["bindir"], RbConfig::CONFIG["ruby_install_name"] + RbConfig::CONFIG["EXEEXT"])
  end
end


if File.exist? "features/support/app_life_cycle_hooks.rb"
  content = IO.read("features/support/app_life_cycle_hooks.rb")
end

require File.join(File.dirname(__FILE__), "calabash-perfectomobile-run")

@features_dir = File.join(FileUtils.pwd, "features")
@support_dir = File.join(@features_dir, "support")
@source_dir = File.join(File.dirname(__FILE__), '..', 'features-skeleton')
@script_dir = File.join(File.dirname(__FILE__), '..', 'scripts')

def relative_to_full_path(file_path)
  File.expand_path(file_path)
end

if ARGV.empty?
  exit calabash_run()
else
  exit calabash_run(relative_to_full_path(ARGV.shift))
end
